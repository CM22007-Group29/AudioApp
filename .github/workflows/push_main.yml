name: Build Test and Security Report

on:
  push:
    branches:
      - 'main'

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and run containers
        run: |
          docker compose build frontend
          docker compose up frontend
          sleep 10  # Wait for services to start

      - name: Stop containers
        if: always()
        run: docker compose down frontend

      - name: Save Docker Image
        run: docker save -o ${{ runner.temp }}/frontend.tar frontend:latest

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend
          path: ${{ runner.temp }}/frontend.tar

  test-backend:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run backend tests
        run: |
          docker compose -f docker-compose.test.yml up --build backend
           
          TESTS_PASSED=$(grep -oP '<span class="passed">\K[0-9]+' backend/reports/test_report.html)
          echo "passed=$TESTS_PASSED" >> "$GITHUB_ENV"
           
          TESTS_FAILED=$(grep -oP '<span class="failed">\K[0-9]+' backend/reports/test_report.html)
          echo "failed=$TESTS_FAILED" >> "$GITHUB_ENV"

          ERRORS=$(grep -oP '<span class="error">\K[0-9]+' backend/reports/test_report.html)
          echo "errors=$ERRORS" >> "$GITHUB_ENV"
           
          COVERAGE=$(grep -oP '<span class="pc_cov">\K[0-9]+' backend/htmlcov/index.html)
          echo "coverage=$COVERAGE" >> "$GITHUB_ENV"

          if [[ "$TESTS_FAILED" -ne 0 ]]; then
            echo "Some tests failed! Failing workflow."
            exit 1
          fi
          if [[ "$ERRORS" -ne 0 ]]; then
            echo "An error occurred! Failing workflow."
            exit 1
          fi

      - name: Upload Coverage Report as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend/htmlcov/

      - name: Upload Test Report as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: backend/reports/

      - name: Job Summary
        if: always()
        run: |
          echo '### Backend Testing Summary 🚀' >> $GITHUB_STEP_SUMMARY
          echo '✅ Passed:   ${{ env.passed }}' >> $GITHUB_STEP_SUMMARY
          echo '❌ Failed:   ${{ env.failed }}' >> $GITHUB_STEP_SUMMARY
          echo '🤓 Coverage: ${{ env.coverage }}%' >> $GITHUB_STEP_SUMMARY

      - name: Stop containers
        if: always()
        run: docker compose -f docker-compose.test.yml down

      - name: Save Docker Image
        run: docker save -o ${{ runner.temp }}/backend.tar backend:latest

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend
          path: ${{ runner.temp }}/backend.tar

  security-and-licence:
    runs-on: ubuntu-latest
    needs: [build-frontend, test-backend]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend
          path: ${{ runner.temp }}

      - name: Download backend
        uses: actions/download-artifact@v4
        with:
          name: backend
          path: ${{ runner.temp }}

      - name: Load images
        run: |
          docker load --input ${{ runner.temp }}/frontend.tar
          docker load --input ${{ runner.temp }}/backend.tar

      # SBOM generation
      - name: Install Syft
        run: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM for Each Docker Image
        run: |
          mkdir sboms
          for service in $(docker compose config --services); do
            image=$(docker images -q $service)
            if [ -z "$image" ]; then
              echo "No image found for $service, skipping SBOM generation."
            else
              echo "Scanning $image"
              syft $image -o spdx-json > sboms/$service.json
            fi
          done

      #- name: Upload SBOM Artifact
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: sboms
      #    path: sboms/

      # Vulnerability scanning
      - name: Install Grype
        run: curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan Each Docker Image for Vulnerabilities
        run: |
          echo '### Security Report 🔐' >> $GITHUB_STEP_SUMMARY
          for service in $(docker compose config --services); do
            image=$(docker images -q $service)
            if [ -z "$image" ]; then
              echo "No image found for $service, skipping SBOM generation."
            else
              echo "Scanning vulnerabilities in $service"
              # results=$(grype sbom:sboms/$service.json --fail-on critical)
              results=$(grype $image --fail-on critical)
              echo "#### $service" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`$results" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
          done
